spring.application.name=wint-to-do

# base path for the REST API
server.servlet.context-path=/wint
# server port
server.port=8081

# Default number of todos to create at startup
app.initial-todo-count=5

# ------------------ H2 DATABASE - IN-MEMORY ------------------
# Use an H2 in-memory database
spring.datasource.url=jdbc:h2:mem:wint-todo-db;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
# Username for the H2 DB (default)
spring.datasource.username=sa
# Password for the H2 DB (default is empty string)
spring.datasource.password=
# Use H2's JDBC driver
spring.datasource.driver-class-name=org.h2.Driver
# Automatically create and update tables based on JPA entities
spring.jpa.hibernate.ddl-auto=update
# Show SQL statements generated by Hibernate
spring.jpa.show-sql=true
# Format SQL output nicely for readability
#spring.jpa.properties.hibernate.format_sql=true
# Show generated SQL statements in the logs
logging.level.org.hibernate.SQL=DEBUG
# Show bound values for SQL parameters with Hibernate 6.x
# This helped in printing the parameter values in the logs. The ones used in insert and update statements.
# The Spring Boot version for me was 3.5.5.
logging.level.org.hibernate.orm.jdbc.bind=TRACE
# Show parameter values bound to SQL statements
#logging.level.org.hibernate.type=TRACE
# Console web UI for H2 Database accessible at /h2-console
spring.h2.console.enabled=true
# Custom path for H2 console (optional)
spring.h2.console.path=/h2-console
# ------------------ END OF H2 DATABASE - IN-MEMORY ------------------

# ------------------ LOGGING FOR WINT CLASSES ------------------------
# Set logging level for application-specific packages
#logging.level.com.wint=DEBUG
logging.level.com.example.winttodo.controller=DEBUG
logging.level.com.example.winttodo.service=DEBUG
logging.level.com.example.winttodo.exception=DEBUG
#logging.level.com.example.winttodo.repository=DEBUG
#logging.level.com.example.winttodo.model=DEBUG
# ------------------ END OF LOGGING FOR WINT CLASSES -----------------